/**
 ********************************
 * _TEXT-INPUTS.SCSS
 ********************************
 */

/**
 * @settings $gemini-text-inputs
 * @description The settings for text-inputs. They mostly extend buttons for
 * the sake of continuity.
 *
 * @prop {color} [color=#333] The color of the text
 * @prop {color} [background-color=#FFF] The background color
 * @prop {measurement} [padding-ends=get(padding-ends, $gemini-buttons)] The padding on the top and bottom
 * @prop {measurement} [padding-sides=get(padding-sides, $gemini-buttons)] The padding on the sides
 * @prop {measurement} [border-width=1px] The border width
 * @prop {color} [border-color=#EEE] The border color
 * @prop {measurement} [border-radius=get(border-radius)] The border radius
 */
$gemini-text-inputs: () !default;

$gemini-text-inputs: extend((
  color: #333,
  background-color: #FFF,
  padding-ends: get(padding-ends, $gemini-buttons),
  padding-sides: get(padding-sides, $gemini-buttons),
  border-width: 1px,
  border-color: get(border-color),
  border-radius: get(border-radius)
), $gemini-text-inputs);

/**
 * @module Text inputs [.text-input]
 * @description Instead of a '[type]' selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
 *
 * @markup
    <input type="text" class="text-input" placeholder="Text...">
    <input type="email" class="text-input" placeholder="Email...">
    <input type="password" class="text-input" placeholder="Password...">
 */
.text-input {
  @include tag(
    get(color, $gemini-text-inputs),
    get(background-color, $gemini-text-inputs),
    get(padding-ends, $gemini-text-inputs),
    get(padding-sides, $gemini-text-inputs),
    get(border-width, $gemini-text-inputs),
    get(border-color, $gemini-text-inputs),
    get(border-radius, $gemini-text-inputs)
  );
  // Stop text-inputs from overflowing.
  max-width: 100%;
}
