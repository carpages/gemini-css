/**
 ********************************
 * _TABLES.SCSS
 ********************************
 */

/**
 * @settings $gemini-tables
 * @description The settings for tables
 *
 * @prop {color} [border-color=lighten(get(color), 50%)] The color of the border when using extension
 * @prop {boolean} [grid=#EEE] Whether to include the table grid (t10, t15, etc.)
 */
$gemini-tables: () !default;

$gemini-tables: extend((
  border-color: lighten(get(color), 50%),
  grid: false,
), $gemini-tables);

/**
 * @module Tables [table]
 * @description We have a lot at our disposal for making very complex table constructs, e.g.:
 *
 * @modifier [.table--bordered] Add a border
 * @modifier [.table--striped] Alternates the background of the rows
 * @modifier [.table--responsive] Makes the table break rows on smaller devices, using data-thead for context
 *
 * @markup
    <table class="table--bordered  table--striped  table--responsive">
      <colgroup>
        <col class="t10">
        <col class="t10">
        <col class="t10">
        <col>
      </colgroup>
      <thead>
        <tr>
          <th colspan="3">Foo</th>
          <th>Bar</th>
        </tr>
        <tr>
          <th>Lorem</th>
          <th>Ipsum</th>
          <th>Dolor</th>
          <th>Sit</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="3">Sit</th>
          <td>Dolor</td>
          <td>03.788</td>
          <td>Lorem</td>
        </tr>
        <tr>
          <td>Dolor</td>
          <td>32.210</td>
          <td>Lorem</td>
        </tr>
        <tr>
          <td>Dolor</td>
          <td>47.797</td>
          <td>Lorem</td>
        </tr>
        <tr>
          <th rowspan=2>Sit</th>
          <td>Dolor</td>
          <td>09.640</td>
          <td>Lorem</td>
        </tr>
        <tr>
          <td>Dolor</td>
          <td>12.117</td>
          <td>Lorem</td>
        </tr>
      </tbody>
    </table>
 */
table {
  width: 100%;
}
th,
td {
  padding: get(spacing) / 4;
  @include media(medium) {
    padding: get(spacing) / 2;
  }
  text-align: left;
}


/**
 * Cell alignments
 */
[colspan] {
  text-align: center;
}
[colspan="1"] {
  text-align: left;
}
[rowspan] {
  vertical-align: middle;
}
[rowspan="1"] {
  vertical-align: top;
}

/**
 * In the HTML above we see several 'col' elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
@if get(grid, $gemini-tables) {

  @for $i from 0 through 100 / 5 {
    $grid-percent: $i * 5;

    .t#{$grid-percent} {
      width: $grid-percent * 1%;
    }
  }

  /* 1/3 */
  .t33 {
    width: 33.333%;
  }
  /* 2/3 */
  .t66 {
    width: 66.666%;
  }
}

/**
 * Bordered tables
 */
.table--bordered {
  th,
  td {
    @include border();

    &:empty {
      border: none;
    }
  }

  thead tr:last-child th {
    border-bottom-width: 2px;
  }

  tbody tr th:last-of-type {
    border-right-width: 2px;
  }
}


/**
 * Striped tables
 */
.table--striped {
  tbody tr:nth-of-type(odd) {
    background-color: lighten(get(border-color, $gemini-tables), 50%);
  }
}


/**
 * @markup
<table class="table--bordered  table--responsive">
  <thead>
    <tr>
      <th colspan="2">Vehicle</th>
      <th>Cost</th>
    </tr>
    <tr>
      <th>Engine</th>
      <th>Model</th>
      <th>Basic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2">Gas</th>
      <td data-thead="Model: ">Ford Focus</td>
      <td data-thead="Basic Cost: ">$19,999</td>
    </tr>
    <tr>
      <td data-thead="Model: ">Mazda 3</td>
      <td data-thead="Basic Cost: ">$19,999</td>
    </tr>
    <tr>
      <th rowspan=2>Diesel</th>
      <td data-thead="Model: ">Jetta TDI</td>
      <td data-thead="Basic Cost: ">$19,999</td>
    </tr>
    <tr>
      <td data-thead="Model: ">Audi A3</td>
      <td data-thead="Basic Cost: ">$19,999</td>
    </tr>
  </tbody>
</table>
 */
@include media(visible-small, false) {
  .table--responsive {
    thead {
      display: none; // Hide heading
    }
    th,
    td,
    tr {
      display: block; // Block all the things
    }
    td {
      text-align: left;
    }
    tr {
      margin-bottom: 16px;
    }
    th:before,
    td:before {
      content: attr(data-thead);
    }

    &.table--bordered {
      th {
        border-top: 0;
        border-left: 0;
        border-right: 0;
        border-bottom-width: 2px;
      }
      td {
        border: 0;
      }
    }
  }
}
