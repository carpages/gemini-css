/**
 ********************************
 * _GRID.SCSS
 ********************************
 */

/**
 * @settings $gemini-grid
 * @description The settings for the grid
 *
 * @prop {measurement} [max-width=get(xlarge, $gemini-screens)] The max-width of the grid's rows
 * @prop {measurement} [gutter=get(spacing)] The gutter size between the columns
 * @prop {integer} [columns=12] The number of columns in the grid
 * @prop {measurement} [medium-breakpoint=get(medium, $gemini-screens)] The breakpoint for medium layout
 * @prop {measurement} [large-breakpoint=get(large, $gemini-screens)] The breakpoint for large layout
 * @prop {measurement} [xlarge-breakpoint=get(xlarge, $gemini-screens)] The breakpoint for xlarge layout
 */
$gemini-grid: () !default;

$gemini-grid: extend((
  max-width:         get(xlarge, $gemini-screens),
  gutter:            get(spacing),
  columns:           12,
  medium-breakpoint: get(medium, $gemini-screens),
  large-breakpoint:  get(large, $gemini-screens),
  xlarge-breakpoint: get(xlarge, $gemini-screens),
), $gemini-grid);

/**
 * This is inspired by the Foundation Grid
 * http://foundation.zurb.com/docs/components/grid.html

 * You can play with a live example here:
 * http://codepen.io/mattdrose/pen/crEHG?editors=100
 */

//
// Grid Functions
//
@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

/*
 * SCREEN SPECIFIED GRID STYLINGS
 */
@mixin screen-grid($screen){

  // Center the column
  .l-column--#{$screen}-centered {
    margin-left: auto;
    margin-right: auto;
    float: none !important;
  }

  // Remove the margin that spaces the columns on smaller screens
  [class*="l-column--#{$screen}"] {
    margin-bottom:0;
  }

  // Basic column usage
  @for $i from 1 through get(columns, $gemini-grid) {
    .l-column--#{$screen}-#{$i} {
      width: gridCalc($i, get(columns, $gemini-grid));
    }
  }

  // Column offsets
  @for $i from 1 through get(columns, $gemini-grid) - 2 {
    .l-column--#{$screen}-offset-#{$i} {
      margin-left: gridCalc($i, get(columns, $gemini-grid));
    }
  }

  @if $screen != 'small' {
    // Reset pull/push to overwrite the smaller screen setting
    .l-column--#{$screen}-push-reset {
      left: inherit;
    }
    .l-column--#{$screen}-pull-reset {
      right: inherit;
    }
  }

  // Basic push and pulls
  @for $i from 2 through get(columns, $gemini-grid) - 2 {
    .l-column--#{$screen}-push-#{$i} {
      left: gridCalc($i, get(columns, $gemini-grid));
    }
    .l-column--#{$screen}-pull-#{$i} {
      right: gridCalc($i, get(columns, $gemini-grid));
    }
  }
    [class*=".l-column--#{$screen}-push"]{
      right: auto;
    }
    [class*=".l-column--#{$screen}-pull"]{
      left: auto;
    }
}

@if get(grid, $gemini-use) {

/**
 * @module Grid Row [.l-row]
 * @description Grid container for columns
 *
 * @modifier [.l-row--collapse] Collapse spacing between inner columns
 *
 * @markup
    <div class="l-row">
     <div class="l-column--small-3 l-column--large-9">
       <div class="my-class my-class--small">Small: 3, Large: 9</div>
     </div>
     <div class="l-column--small-9 l-column--large-3">
       <div class="my-class my-class--small">Small: 9, Large: 3</div>
     </div>
    </div>
 */
.l-row {
  @include clearfix;
  width: 100%;
  margin: 0 auto;
  max-width: get(max-width, $gemini-grid);

  //Keep the end columns flush with the gutter
  & .l-row {
    margin-left: -(get(gutter, $gemini-grid) / 2);
    margin-right: -(get(gutter, $gemini-grid) / 2);
    width: auto;
    max-width: none;
  }
}
  // Collapsed columns with no spacing
  .l-row--collapse > [class*="l-column"] {
    padding: 0;

    & > .l-row{
      margin-left:0;
      margin-right:0;
    }
  }

/**
 * @module Grid Column [.l-column]
 * @description Column within a row. Screen size is mobile first (ie. small applies to medium, large, and xlarge).
 *
 * @modifier [.l-column--{screen}-{number}] The width you want that column to occupy on the specified screen size
 * @modifier [.l-column--{screen}-offset-{number}] The space that you want offset before the column on the specified screen size
 * @modifier [.l-column--{screen}-centered] Center the column on the specified screen size
 * @modifier [.l-column--{screen}-pull-{number}] How many units you want to pull the column to the left on the specified screen size
 * @modifier [.l-column--{screen}-push-{number}] How many units you want to push the column to the right on the specified screen size
 * @modifier [.l-column--{screen}-pull-reset] Reset the pull on the specified screen size
 * @modifier [.l-column--{screen}-push-reset] Reset the push on the specified screen size
 * @modifier [.l-column--end] Floats the last column to the left
 */
[class*="l-column"] {
  @include clearfix;
  position: relative;
  padding: 0 (get(gutter, $gemini-grid) / 2);
  width: 100%;
  float: left;
  margin-bottom: get(spacing);
}

//Float the last column to the right
[class*="l-column"] + [class*="l-column"]:last-child {
  float: right;

  // Unless the last column is specified as end
  &.l-column--end {
    float: left;
  }
}

/*
 * INCLUDE SCREEN BREAKPOINTS
 */
@include screen-grid('small');

@include media-query(get(medium-breakpoint, $gemini-grid)) {
  @include screen-grid('medium');
}

@include media-query(get(large-breakpoint, $gemini-grid)) {
  @include screen-grid('large');
}

@include media-query(get(xlarge-breakpoint, $gemini-grid)) {
  @include screen-grid('xlarge');
}

@media print{
  @include screen-grid('print');
}

/**
 * @markup
  <div class="l-row">
    <div class="l-column--small-6">
      <div class="l-row">
        <div class="l-column--small-6"><div class="my-class">6&rarr;6</div></div>
        <div class="l-column--small-6"><div class="my-class">6&rarr;6</div></div>
      </div>
    </div>
    <div class="l-column--small-6"><div class="my-class">6</div></div>
  </div>
 */

/**
 * @markup
  <div class="l-row">
    <div class="l-column--small-3 l-column--small-offset-2">
      <div class="my-class">3, offset 2</div>
    </div>
    <div class="l-column--small-6 l-column--small-offset-1">
      <div class="my-class">6, offset 1</div>
    </div>
  </div>
 */

/**
 * @markup
  <div class="l-row">
    <div class="l-column--small-3 l-column--small-push-9
                l-column--medium-push-reset">
      <div class="inner">3, first</div>
    </div>
    <div class="l-column--small-9 l-column--small-pull-3
                l-column--medium-pull-reset">
      <div class="inner">9, last</div>
    </div>
  </div>
 */

}//end
