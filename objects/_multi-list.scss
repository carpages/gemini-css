/**
 ********************************
 * _MULTI-LIST.SCSS
 ********************************
 */

@use "sass:math";

@if $use-multi-list == true {
  /**
   * @module Multi Lists [.multi-list]
   * @description Splits a list into multiple columns
   *
   * @modifier [.multi-list--block] Display list using inline-block. This is especially useful for content with dynamic heights
   * @modifier [.multi-list--small-2] Two columns
   * @modifier [.multi-list--small-3] Three columns
   *
   * @markup
    <ul class="multi-list  multi-list--small-2  multi-list--medium-4  multi-list--large-5">
      <li>Lorem</li>
      <li>Ipsum</li>
      <li>Dolor</li>
      <li>Sit</li>
    </ul>
   *
   * @markup
    <ul class="multi-list  multi-list--block  multi-list--medium-4  multi-list--large-5"><!--
      --><li>Lorem</li><!--
      --><li>Ipsum</li><!--
      --><li>Dolor</li><!--
      --><li>Sit</li><!--
    --></ul>
   */
  .multi-list {
    @extend .clearfix;

    margin-left: 0;
    list-style: none;
  }

  .multi-list > li {
    float: left;
    width: 100%;
  }

  .multi-list--block > li {
    display: inline-block;
    float: none;
    padding-bottom: $base-spacing-unit;
    vertical-align: top;
  }

  /**
   * Apply these classes alongside the '.multi-list' class on
   * lists to determine how wide their columns are.
   */
  @for $i from 2 through 4 {
    .multi-list--small-#{$i} > li {
      width: percentage(math.div(1, $i));
    }
  }
  @include quick-media-query(medium) {
    @for $i from 2 through 4 {
      .multi-list--medium-#{$i} > li {
        width: percentage(math.div(1, $i));
      }
    }
  }
  @include quick-media-query(large) {
    @for $i from 2 through 5 {
      .multi-list--large-#{$i} > li {
        width: percentage(math.div(1, $i));
      }
    }
  }

  /**
   * @submodule Multi-list Vertical [.multi-list--vertical]
   * Requires Javascript to add the yes-columnCount parent class
   * See cp.support.js
   *
   * @description causes the LI to be listed vertically in columns like:
   *
   *   1   4   7
   *   2   5   8
   *   3   6   9
   *
   * instead of the default multi-list when LIs float:left.
   */
  .yes-columnCount {
    .multi-list--vertical {
      @extend %gpu;

      & > li {
        float: none;
        width: 100%;
      }

      @for $i from 2 through 3 {
        &.multi-list--small-#{$i} {
          @include column-count($i);
        }
      }

      @include quick-media-query(medium) {
        @for $i from 2 through 4 {
          &.multi-list--medium-#{$i} {
            @include column-count($i);
          }
        }
      }

      @include quick-media-query(large) {
        @for $i from 2 through 5 {
          &.multi-list--large-#{$i} {
            @include column-count($i);
          }
        }
      }
    }
  }
}//endif
