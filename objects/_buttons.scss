/**
 ********************************
 * _BUTTONS.SCSS
 ********************************
 */

@if $use-buttons == true {

  /**
   * @module Buttons [.button]
   * @description Different buttons
   *
   * @modifier [.button--small] Small button
   * @modifier [.button--large] Large button
   * @modifier [.button--huge] Huge button
   * @modifier [.button--full] Button is the entirety of the container
   * @modifier [.button--alpha] Button with 3x font
   * @modifier [.button--beta] Button with 2x font
   * @modifier [.button--gamma] Button with 1.5x font
   * @modifier [.button--natural] Button with inherited size
   *
   * @markup Button Sizes
   *   <p>
   *       <a class="button">Button</a>
   *       <a class="button button--small">Small Button</a>
   *       <a class="button button--large">Large Button</a>
   *       <a class="button button--huge">Huge Button</a>
   *   </p>
   *
   * @markup Natural Button
   *   <p>This <a class="button button--natural">button</a> will fit in nicely with its context.</p>
   */

  $button-defaults: (
    color: #333,
    background-color: #eee,
    border-width: 1px,
    border-color: #333,
    border-radius: 4px,
    vpadding: 0.5em,
    hpadding: 1em
  );

  $btn: $button-defaults;
  @if variable-exists(button-settings) {
    $btn: map-merge($button-defaults, $gemini-button-settings);
  }

  .button {
    display: inline-block;
    vertical-align: middle;
    font: inherit;
    border: none;
    margin: 0;
    cursor: pointer;
    padding: _($btn, vpadding) _($btn, hpadding);
    padding: calc(#{_($btn, vpadding)} - #{_($btn, border-width)}) _($btn, hpadding);

    border: _($btn, border-width) solid _($btn, border-color);

    @if _($btn, border-radius) > 0 {
      @include border-radius(_($btn, border-radius));
    }

    color: _($btn, color);
    background-color: _($btn, background-color);

    &,
    &:hover {
      text-decoration: none;
    }

    &:active,
    &:focus {
      outline: none;
    }
  }

  .button--natural {
    vertical-align: baseline;
    font-size: inherit;
    line-height: inherit;
    line-height: calc(100% - #{_($btn, border-width) * 2});
    padding-top: 0;
    padding-bottom: 0;
  }

  .button--small {
    padding: _($btn, vpadding) * 0.5 _($btn, hpadding) * 0.5;
  }
  .button--large {
    padding: _($btn, vpadding) * 1.5 _($btn, hpadding) * 1.5;
  }
  .button--huge {
    padding: _($btn, vpadding) * 2 _($btn, hpadding) * 2;
  }

  .button-group {
    display: inline-block;

    &:after {
      content: "";
      display: table;
      clear: both;
    }

    > .button {
      float: left;

      &:not(:first-child) {
        border-left: none;

        @if _($btn, border-radius) > 0 {
          @include border-left-radius(0);
        }

      }
      &:not(:last-child) {
        border-right: _($btn, border-width) solid lighten(_($btn, border-color), 50%);

        @if _($btn, border-radius) > 0 {
          @include border-right-radius(0);
        }
      }
    }
  }
    .button-group--2 {
      width: 100%;

      > .button {
        width: 50%;
        text-align: center;
      }
    }
    .button-group--3 {
      width: 100%;

      > .button {
        width: 33.3332%;
        text-align: center;
      }
    }

}//endif
