/**
 ********************************
 * _COLORS.SCSS
 ********************************
 */


/**
 * @settings $gemini-colors
 * @description Add custom colors to be used with getColor() or .c-{color}.
 *
 * @prop {color} [facebook=#315998] Facebook Blue
 * @prop {color} [twitter=#1AB2E8] Twitter Blue
 * @prop {color} [google=#4386F7] Google Blue
 * @prop {color} [google-plus=#DD4C39] Google Plus Red
 * @prop {color} [pinterest=#C9232D] Pinterest Red
 */
$gemini-colors: () !default;

$gemini-colors: extend((
  facebook:    #3A5998,
  twitter:     #1AB2E8,
  google:      #4386F7,
  google-plus: #DD4C39,
  pinterest:   #C9232D,
), $gemini-colors);



/**
 * Add all the colors to the color collection
 */
@each $name, $color in $gemini-colors {
  $trash: addColor($name, $color);
}

/**
 * @module Grey Colors
 * @description Easy reference to the color scale. The scale goes from 0 - 100
 * by intervals of 5, where 0 is white, and 100 is black.
 *
 * @example
    .foo {
      color: get(g20, $color);
    }
 */
// Need to wrap division in paren since libsass v3.4.0
// https://github.com/sass/libsass/issues/2149
@for $i from 0 through (100 / 5) {
  $grey-percent: $i * 5;

  $trash: addColor(g + $grey-percent, darken(#FFF, $grey-percent));
}


@if get(colors, $gemini-use) {

  @each $name, $color in $gemini-color-collection {

    /**
     * @module Color Helpers
     * @description Classes to help you easily set a color. You can easily add
     * colors in your settings.
     *
     * @markup
      <span class="c-g50">I'm gray!</span>
      <span class="c-facebook">I'm Facebook blue!</span>
     */
    .c-#{"" + $name} {
      color: $color;
    }

  }

}
