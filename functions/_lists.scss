  /**
 ********************************
 * _LISTS.SCSS
 ********************************
 */

  @use "sass:meta";
  @use "sass:list";

  // Some list helpers thanks to
  // http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/

  /**
 * @function remove
 * @description Remove an item from a list
 *
 * @param {list} [$list] The list to alter
 * @param {undefined} [$value] The value to remove from the lsit
 * @param {boolean} [$recursive=false] Whether to search recursively
 *
 * @return {list} The newly trimmed list
 */
  @function remove($list, $value, $recursive: false) {
    $result: ();

    @for $i from 1 through list.length($list) {
      @if meta.type-of(list.nth($list, $i)) == list and $recursive {
        $result: list.append($result, list.remove(list.nth($list, $i), $value, $recursive));
      }

      @else if list.nth($list, $i) !=$value {
        $result: list.append($result, list.nth($list, $i));
      }
    }

    @return $result;
  }

  /**
 * @function implode
 * @description Implode the items of a list into a string. Similar to javascripts
 * Array.implode();
 *
 * @param {list} [$list] The list to implode
 * @param {string} [$glue=""] The string to implode the list with
 * @param {string} [$trim=true] Whether to trim empty strings and nulls
 *
 * @return {string} A string of the implodeed list
 *
 * @example
    .foo:before {
      content: implode((a,b,c), "-") // a-b-c;
    }
 */
  @function implode($list, $glue: "", $trim: true, $is-nested: false) {
    $result: null;

    @if $trim {
      $list: remove($list, "", true);
      $list: remove($list, null, true);
    }

    @for $i from 1 through list.length($list) {
      $e: list.nth($list, $i);

      @if meta.type-of($e) == list {
        $result: $result#{implode($e, $glue, $trim, true)};
      }

      @else {
        $result: if($i != list.length($list) or $is-nested, #{$result}#{$e}#{$glue}, #{$result}#{$e});
      }
    }

    @return $result;
  }
