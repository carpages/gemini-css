/**
 ********************************
 * _MAPS.SCSS
 ********************************
 */

/**
 * @function get
 * @description Gets the key from a map. By default it retrieves from
 * $gemini-base. You can access maps recursively using dot notation like in
 * Javascript objects (leve1.level2).
 *
 * @param {string} [$key] The key of the desired value
 * @param {map} [$map=$gemini-base] The map to search
 *
 * @return {undefined} Returns the assoicated variable
 *
 * @example
    .foo {
      color: get(brand-color);
      background-color: get(first.second.color, $some-map);
    }
 */
@function get($key, $map: $gemini-base) {

  @if type-of($key) == string and (str-index($key, ".") or 0) > 0 {

    $parent-key: str-slice($key, 1, str-index($key, ".") - 1);
    $child-key: str-slice($key, str-index($key, ".") + 1);

    @if type-of(map-get($map, $parent-key)) == map {
      @return get($child-key, map-get($map, $parent-key));
    }
  }

  @return map-get($map, $key);
}

/**
 * @function extend
 * @description Merges two maps together. The second map take priority. This
 * works recursively for deep merges.
 *
 * @param {map} [$map1] The first map
 * @param {map} [$map2] The second map which take priority
 *
 * @return {map} A newly combined map
 */
@function extend($map1, $map2) {
  $return: $map1;

  @each $key, $value in $map2 {

    @if map-get($return, $key) != null and type-of($value) == map and type-of(map-get($return, $key)) == map {
      $value: extend(map-get($return, $key), $value);
    }

    $return: map-merge($return, ($key: $value));
  }

  @return $return;
}
