/**
 ********************************
 * _ARROWS.SCSS
 ********************************
 */

/**
 * @mixin arrow
 * @description This mixin creates a CSS arrow on a given element. We can have
 * the arrow appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * @param {string} [$arrow-edge=bottom] The edge that the arrow is on (top, right, bottom, left)
 * @param {string} [$arrow-location=center] The location placement along the edge (top, right, center, bottom, left)
 * @param {string} [$arrow-size=get(spacing)*0.4] The size of the arrow
 * @param {string} [$arrow-color=#333] The color of the arrow
 * @param {string} [$arrow-size=get(spacing)*0.4] The size of the border
 * @param {string} [$border-color=$arrow-color] The color of the border
 *
 * @example
    .foo {
      @include arrow(bottom, center, red, black);
    }
 */

@mixin arrow(
  $arrow-edge: bottom,
  $arrow-location: center,
  $arrow-size: get(spacing) * 0.4,
  $arrow-color: #333,
  $border-size: 2px,
  $border-color: $arrow-color,
  $set-position: true
  ) {

  @if $set-position {
    position: relative;
  }

  &:before,
  &:after {
    content: "";
    position: absolute;
    border-collapse: separate;
  }

  @if $border-size {
    &:before {
      border: $arrow-size solid transparent;
    }
  } @else {
    &:before {
      content: normal;
    }
  }
  &:after {
    border: $arrow-size - $border-size solid transparent;
  }

  @if $arrow-edge == top {

    &:before,
    &:after {
      bottom: 100%;
    }

    @if $border-size {
      &:before {
        border-bottom-color: $border-color !important;
      }
    }
    &:after {
      border-bottom-color: $arrow-color !important;
    }

  }

  @if $arrow-edge == bottom {

    &:before,
    &:after {
      top: 100%;
    }

    @if $border-size {
      &:before {
        border-top-color: $border-color !important;
      }
    }
    &:after {
      border-top-color: $arrow-color !important;
    }

  }

  @if $arrow-edge == bottom or $arrow-edge == top {

    @if $arrow-location == left {
      &:before {
        left: $arrow-size - $border-size;
      }
      &:after {
        left: $arrow-size;
      }
    }

    @if $arrow-location == center {
      &:before,
      &:after {
        left: 50%;
        margin-left: - $arrow-size;
      }
      &:after {
        margin-left: - $arrow-size + $border-size;
      }
    }

    @if $arrow-location == right {
      @if $border-size {
        &:before {
          right: $arrow-size - $border-size + 10px;
        }
      }
      &:after {
        right: $arrow-size + 10px;
      }
    }

  }

  @if $arrow-edge == right {

    &:before,
    &:after {
      left: 100%;
    }

    @if $border-size {
      &:before {
        border-left-color: $border-color !important;
      }
    }

    &:after {
      border-left-color: $arrow-color !important;
    }

  }

  @if $arrow-edge == left {

    &:before,
    &:after {
      right: 100%;
    }

    @if $border-size {
      &:before {
        border-right-color: $border-color !important;
      }
    }

    &:after {
      border-right-color: $arrow-color !important;
    }

  }

  @if $arrow-edge == left or $arrow-edge == right {

    @if $arrow-location == top {
      @if $border-size {
        &:before {
          top: $arrow-size - $border-size;
        }
      }
      &:after {
        top: $arrow-size;
      }
    }

    @if $arrow-location == center {
      &:before,
      &:after {
        top: 50%;
        margin-top: - $arrow-size;
      }
      &:after {
        margin-top: - $arrow-size + $border-size;
      }
    }

    @if $arrow-location == bottom {
      @if $border-size {
        &:before {
          bottom: $arrow-size - $border-size;
        }
      }
      &:after {
        bottom: $arrow-size;
      }
    }

  }

}
