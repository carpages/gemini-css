/**
 ********************************
 * _SPACING.SCSS
 ********************************
 */

/**
 * Spacing helpers for margin and padding:
 * [push|pad]-[rev]-[none|half|double]-[medium|large|xlarge]-[top|right|bottom|left]
 */

$gemini-spacing: () !default;

$gemini-spacing: extend((
  naming: (
    type: (
      "push":    "margin",
      "pad":     "padding",
    ),
    reverse: (
      "":         1,
      "rev":     -1,
    ),
    size: (
      "none":    0,
      "half":    0.5,
      "":        1,
      "double":  2,
    ),
    direction: (
      "":        "",
      "top":     "top",
      "right":   "right",
      "bottom":  "bottom",
      "left":    "left",
    ),
  ),
  responsive: false,
), $gemini-spacing);

@mixin spacing-helpers($screen-title: "") {

  @each $type-title, $type in get("naming.type", $gemini-spacing) {
    @each $reverse-title, $reverse in get("naming.reverse", $gemini-spacing) {
      @each $size-title, $size in get("naming.size", $gemini-spacing) {
        @each $direction-title, $direction in get("naming.direction", $gemini-spacing) {

          @if ($type != "padding" or $reverse != -1) and
              ($size != 0 or $reverse != -1) {

            .#{join($type-title $reverse-title $size-title $screen-title $direction-title, "-")} {
              #{join($type $direction, "-")}: get(spacing) * $size * $reverse !important;
            }

          }

        }
      }
    }
  }

}

@include spacing-helpers();

@if get(responsive, $gemini-spacing) {

  @include quick-media-query(medium){
    @include spacing-helpers(medium);
  }

  @include quick-media-query(large){
    @include spacing-helpers(large);
  }

  @include quick-media-query(xlarge){
    @include spacing-helpers(xlarge);
  }

}
