/**
 ********************************
 * _SPACING.SCSS
 ********************************
 */

/**
 * @settings $gemini-spacing
 * @description Settings for the spacing helper
 *
 * @prop {map} [naming] You can add custom naming for the helper. This is complicated: Look at source code
 * @prop {boolean} [medium=false] Whether to include medium responsive helpers. NOTE: This adds 4kb to output CSS
 * @prop {boolean} [large=false] Whether to include large responsive helpers. NOTE: This adds 4kb to output CSS
 * @prop {boolean} [xlarge=false] Whether to include xlarge responsive helpers. NOTE: This adds 4kb to output CSS
 */
$gemini-spacing: () !default;

$gemini-spacing: extend(
  (
    debug: false,
    naming: (
      type: (
        "push": "margin",
        "pad": "padding",
      ),
      reverse: (
        "": 1,
        "rev": -1,
      ),
      size: (
        "none": 0,
        "half": 0.5,
        "": 1,
        "double": 2,
      ),
      direction: (
        "": (
          "",
        ),
        "top": (
          top,
        ),
        "right": (
          right,
        ),
        "bottom": (
          bottom,
        ),
        "left": (
          left,
        ),
        "sides": (
          left,
          right,
        ),
        "ends": (
          top,
          bottom,
        ),
      ),
    ),
    screens: (
      "medium": false,
      "large": false,
      "xlarge": false,
    ),
    separators: (
      default: "-",
      screen: "-",
      direction: "-",
    ),
  ),
  $gemini-spacing
);

/**
 * Not documented since this shouldn't be used outside of this conext
 */

$debug: get("debug", $gemini-spacing);

// Get separators into variables for better readability
$default-separator: get("separators.default", $gemini-spacing);
$screen-separator: get("separators.screen", $gemini-spacing);
$direction-separator: get("separators.direction", $gemini-spacing);

@mixin spacing-helpers($screen-title: "") {
  $screen-output: "";

  @if ($screen-title != "") {
    $screen-output: $screen-separator + $screen-title;
  }

  @if $debug {
    @debug "'#{$default-separator}'";
    @debug "'#{$screen-separator}'";
    @debug "'#{$direction-separator}'";
    @debug "test implode: #{implode((top, bottom), "-")}";
  }

  @each $type-title, $type in get("naming.type", $gemini-spacing) {
    @each $reverse-title, $reverse in get("naming.reverse", $gemini-spacing) {
      @each $size-title, $size in get("naming.size", $gemini-spacing) {
        @each $direction-title,
          $direction-list in get("naming.direction", $gemini-spacing)
        {
          $direction-output: "";
          @if ($direction-title != "") {
            $direction-output: $direction-separator + $direction-title;
          }

          @if ($type != "padding" or $reverse != -1) and
            ($size != 0 or $reverse != -1)
          {
            $base: implode(
              $type-title $reverse-title $size-title,
              $default-separator
            );
            $screenBase: implode($base $screen-title, $screen-separator);
            $directionBase: implode(
              $screenBase $direction-title,
              $direction-separator
            );

            @if $debug {
              @debug "--------- BEGIN (#{$type-title}, #{$size-title}) ---------";
              @debug "class: .#{$directionBase}";
              @debug "properties:";
              @each $direction in $direction-list {
                @debug "  direction: #{$direction}";
                @debug "  #{implode($type $direction, "-")}: #{get(spacing) * $size * $reverse !important}";
              }
              @debug "--------- END ---------";
              @debug "";
            }

            .#{$directionBase} {
              @each $direction in $direction-list {
                #{implode($type $direction, "-")}: get(spacing) *
                  $size *
                  $reverse !important;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * @module Spacing
 * @description Helpers to quickly add margin and spacing to an element.
 * (push|pad)-(rev)-(none|half|double)-(medium|large|xlarge)-(top|right|bottom|left)
 *
 * @modifier [.push] Add margin
 * @modifier [.pad] Add padding
 * @modifier [(push|pad)-rev] Give it a negative value
 * @modifier [(push|pad)-(rev)-none] Set it to zero
 * @modifier [(push|pad)-(rev)-half] Set it to half the base spacing value
 * @modifier [(push|pad)-(rev)-double] Set it to double the base spacing value
 * @modifier [(push|pad)-(rev)-(none|half|double)-medium] Only on medium screens (set responsive to true)
 * @modifier [(push|pad)-(rev)-(none|half|double)-large] Only on large screens (set responsive to true)
 * @modifier [(push|pad)-(rev)-(none|half|double)-xlarge] Only on xlarge screens (set responsive to true)
 * @modifier [(push|pad)-(rev)-(none|half|double)-(medium|large|xlarge)-top] Apply to top
 * @modifier [(push|pad)-(rev)-(none|half|double)-(medium|large|xlarge)-right] Apply to right
 * @modifier [(push|pad)-(rev)-(none|half|double)-(medium|large|xlarge)-bottom] Apply to bottom
 * @modifier [(push|pad)-(rev)-(none|half|double)-(medium|large|xlarge)-left] Apply to left
 *
 * @markup
    <div class="push-bottom">Test!</div> // Base margin to bottom
    <div class="pad-medium-top">Test!</div> // Adds to top on medium screens
    <div class="push-rev-half-left">Test!</div> // Bleeds half spacing to the left
    <div class="push-double-xlarge-right">Test!</div> // Adds double margin to right on xlarge screens
 */
@include spacing-helpers();

@each $screen-size, $enabled in get(screens, $gemini-spacing) {
  @if $enabled {
    @include media($screen-size) {
      @include spacing-helpers($screen-size);
    }
  }
}
